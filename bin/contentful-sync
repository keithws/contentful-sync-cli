#!/usr/bin/env node

/* eslint-env node */
"use strict";

const contentfulSync = require("..");
const version = require("../package.json").version;

const commander = require("commander");
const logger    = require("eazy-logger").Logger({
    prefix: "[{green:CF}] ",
    useLevelPrefixes: false
});

commander
    .version(version)
    .option("-q, --quiet", "Progress is not reported to the standard error stream.")
    .option("-v, --verbose", "Be verbose.")
    .option("-a, --access-token <token>", "Contentful Access Token")
    .option("-i, --initial", "Fetch everything instead of fetching only what has changed.")
    .option("-r, --resolve-links <boolean>", "Resolve links to other entries and assets.", true)
    .option("-t, --type <type>", "What to sync: all (default), Asset, Entry, Deletion, DeletedAsset, or DeletedEntry", "all")
    .option("-c, --content-type <content-type>", "Limit sync to entries of specified content type. Implies --type Entry");

commander.command("fetch <space> [destination]")
    .description("Fetch content from a space with the Contentful Sync API")
    .action(function handleAction (space, destination) {

        let options = {
            "accessToken": commander.accessToken || process.env.CONTENTFUL_ACCESS_TOKEN,
            "space": space || process.env.CONTENTFUL_SPACE_ID,
            "destination": destination || ".",
            "initial": commander.initial || null,
            "resolveLinks": commander.resolveLinks || true,
            "type": commander.type || "all",
            "contentType": commander.contentType || null
        };

        contentfulSync.fetch(options)
        .then((response) => {

            if (!commander.quiet) {

                logger.log("New content: %d entries, %d assets", response.entries.length, response.assets.length);
                logger.log("Saved sync token for next time.");

                logger.log("New and updated content: %d entries, %d assets", response.entries.length, response.assets.length);
                logger.log("        Deleted content: %d entries, %d assets", response.deletedEntries.length, response.deletedAssets.length);
                logger.log("Saved sync token for next time.");

                logger.log("Saved data to %s", options.destination);

            }

        })
        .catch(err => {

            /* eslint-disable no-console */
            console.error(err);
            logger.setOnce("useLevelPrefixes", true).error(err);

        });

    });

commander.parse(process.argv);
